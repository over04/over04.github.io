[{"content":"原因分析 本人使用的luckfox-pico使用的芯片是RV1106，由于瑞芯未开源sdk，提供的工具链仅有uclibc而不是rust官方stage1支持的glibc，因此我们手动配置工具链。此外，由于uclibc的特殊性，rust最高支持版本为==rustc 1.75.0-nightly (2bbb61989 2023-10-04)==，（在此版本后编译时会由于缺少getauxval函数导致编译错误）因此部分库可能不支持，例如tokio-websockets、linux-embedded-hal。如果可以接受，那么接下来看交叉编译教程\n交叉编译 首先准备好x86-linux环境，我使用Ubuntu 20.04.6 LTS，也是luckfox官方推荐的ubuntu版本。\n然后安装rust，如果下载缓慢可以换源，下面是临时更换rust源\n1 export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup 然后准备好工具链（luckfox-pico的工具链位置），记为SDK_ROOT=/path/to/arm-rockchip830-linux-uclibcgnueabihf 执行命令\n1 2 export PATH=$SDK_ROOT/bin:$PATH export SYSROOT=$SDK_ROOT/arm-rockchip830-linux-uclibcgnueabihf/sysroot 接着进入到你的项目中，在项目的根目录中 新建第一个文件rust-toolchain.toml\n1 2 3 4 5 [toolchain] channel = \u0026#34;nightly-2023-10-05\u0026#34; components = [ \u0026#34;cargo\u0026#34;, ] 新建第二个文件armv7-unknown-linux-uclibceabihf.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \u0026#34;abi\u0026#34;: \u0026#34;eabihf\u0026#34;, \u0026#34;arch\u0026#34;: \u0026#34;arm\u0026#34;, \u0026#34;crt-static-respected\u0026#34;: true, \u0026#34;data-layout\u0026#34;: \u0026#34;e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\u0026#34;, \u0026#34;dynamic-linking\u0026#34;: true, \u0026#34;env\u0026#34;: \u0026#34;uclibc\u0026#34;, \u0026#34;features\u0026#34;: \u0026#34;+v7,+vfp3,-d32,+thumb2,-neon\u0026#34;, \u0026#34;has-rpath\u0026#34;: true, \u0026#34;has-thread-local\u0026#34;: true, \u0026#34;is-builtin\u0026#34;: true, \u0026#34;llvm-target\u0026#34;: \u0026#34;armv7-unknown-linux-uclibceabihf\u0026#34;, \u0026#34;max-atomic-width\u0026#34;: 64, \u0026#34;os\u0026#34;: \u0026#34;linux\u0026#34;, \u0026#34;position-independent-executables\u0026#34;: true, \u0026#34;relro-level\u0026#34;: \u0026#34;full\u0026#34;, \u0026#34;supported-split-debuginfo\u0026#34;: [ \u0026#34;packed\u0026#34;, \u0026#34;unpacked\u0026#34;, \u0026#34;off\u0026#34; ], \u0026#34;target-family\u0026#34;: [ \u0026#34;unix\u0026#34; ], \u0026#34;target-mcount\u0026#34;: \u0026#34;\\u0001__gnu_mcount_nc\u0026#34;, \u0026#34;target-pointer-width\u0026#34;: \u0026#34;32\u0026#34; } 新建第三个文件.cargo/config(无后缀)\n1 2 3 4 5 6 [target.armv7-unknown-linux-uclibceabihf] linker = \u0026#34;arm-rockchip830-linux-uclibcgnueabihf-gcc\u0026#34; rustflags = [ \u0026#34;-C\u0026#34;, \u0026#34;link-arg=-ffunction-sections\u0026#34;, \u0026#34;-C\u0026#34;, \u0026#34;link-arg=-fdata-sections\u0026#34;, ] 然后运行\n1 cargo build --release -Z build-std=std --target armv7-unknown-linux-uclibceabihf 在命令开始时会下载nightly-2023-10-05的rust，最后会让你添加工具链，执行命令：\n1 rustup component add rust-src --toolchain nightly-2023-10-05-x86_64-unknown-linux-gnu 完成后重新编译，target/armv7-unknown-linux-uclibceabihf/release下的可执行文件即可拷贝到luckfox-pico运行(需要chmod +x)\n可以使用的库 下面是我使用到且编译通过的库\ntokio = \u0026ldquo;1.44.2\u0026rdquo; gpio-cdev = \u0026ldquo;0.6.0\u0026rdquo; serde = \u0026ldquo;1.0.219\u0026rdquo; reqwest(需要手动指定依赖的版本) ","date":"2025-05-06T00:00:00Z","permalink":"https://over04.github.io/p/luckfox-pico%E5%9C%A8buildroot%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BF%90%E8%A1%8Crust%E7%A8%8B%E5%BA%8F/","title":"luckfox-pico在buildroot系统下运行rust程序"},{"content":"解决方法来源\n解决方法 进入软路由，输入以下命令\n1 ifconfig 记录软路由ip的网卡名称，我这里是br-lan\n接下来输入\n1 iptables -t nat -I POSTROUTING -o br-lan -j MASQUERADE 返回Unraid中，重启docker，即可生效\n","date":"2025-03-09T00:00:00Z","permalink":"https://over04.github.io/p/unraid%E5%8D%95%E8%87%82%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%87%B4docker-bridge%E6%97%A0%E7%BD%91%E7%BB%9C/","title":"Unraid单臂软路由导致docker bridge无网络"},{"content":"前言：本篇文章只讲述部署的经历，并没有找到问题的所在\ndocker compose不走软路由代理 单独使用docker pull，走软路由代理；使用docker compose并创建了一个新的docker网后就不走代理（非host的docker容器也是一样，可能要进行设置）\ndify-api启动时报错 dify-api启动时报错，读取数据库出错，继续追踪，发现redis启动失败并一直重启（不知道是触发什么bug了），删除容器、本地数据后均无效（数据挂载到flash的原因？），重新下载镜像后成功启动\n环境变量配置 最主要修改的是以下几项配置\n1 2 SECRET_KEY # 密钥必须要改的 EXPOSE_NGINX_PORT # 对外暴露的端口EXPOSE_NGINX_SSL_PORT同理 偶遇神秘问题，拼尽全力无法战胜 情景、解决思路回顾 内网下打开网站，显示空白，手动进入/install页面 注册完毕，直接跳转到/apps页面 页面无法显示，使用F12发现401报错 使用无痕模式、Edge-dev登录没有出现问题 对比请求发现登录成功时没有设置cookie 失败的浏览器在删除cookie后功能正常 cookie是哪来的 考虑到内网端口曾经被使用过，所以可能有残留着的cookie。但是在同样情况下，使用内网穿透和虚拟局域网同样产生了cookie，导致登录不了。因此该可能排除。也有可能是nginx启动不充分产生的问题（不知道，我猜的）\n总结 真是酣畅淋漓的赤石啊！ 感觉像是侦探查案，凶手没找到，人质自己跑回来了\u0026hellip;\u0026hellip; 总之，希腊奶~\n","date":"2025-03-08T00:00:00Z","permalink":"https://over04.github.io/p/%E5%9C%A8unraid%E7%9A%84%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%83%A8%E7%BD%B2dify%E7%9A%84%E7%BB%8F%E5%8E%86/","title":"在Unraid的环境下部署Dify的经历"},{"content":"docker网络问题 在docker compose下不知道为什么就是不走软路由代理（为什么，能解释一下吗）\n\u0026ldquo;key: expected bytes or bytearray, but got \u0026lsquo;NoneType\u0026rsquo;\u0026rdquo; 使用edge-dev就可以了(可能跟cookie有关)\nUnraid Docker Compose插件 使用docker compose插件后，直接挂载了80:80,443:443，使用命令启动后无问题\n","date":"2025-03-08T00:00:00Z","permalink":"https://over04.github.io/p/%E5%9C%A8unraid%E7%9A%84%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%83%A8%E7%BD%B2ragflow%E8%B8%A9%E5%9D%91%E7%82%B9/","title":"在Unraid的环境下部署RAGFlow踩坑点"},{"content":"1.网络问题 在mac中如果设置了http_proxy环境变量，那么flutter默认会将本地路径也代理进去，根据flutter doctor -v配置即可。重要的是配置好后==要重启==！！！\n2.无法打开“iproxy”，因为无法验证开发者 1 sudo xattr -d com.apple.quarantine /Users/xxx/flutter/bin/cache/artifacts/usbmuxd/iproxy # 换成你的flutter路径 ","date":"2025-01-20T00:00:00Z","permalink":"https://over04.github.io/p/flutter%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/","title":"Flutter环境配置问题"},{"content":"1.vue-router 最基本的用法就是自定义router然后注入，下面是几个遇到的问题\n1.createRouter中history三个模式怎么选 根据vue-router的官网的介绍，开发过程中使用createWebHashHistory比较好，因为可以直接在地址栏中访问\n2.如何嵌套页面 在App.vue中，我们通过使用以下方法使用路由页面。\n1 \u0026lt;RouterView\u0026gt; \u0026lt;/RouterView\u0026gt; 嵌套页面也类似\n1 2 3 4 5 6 7 8 9 10 11 12 { path: \u0026#39;...\u0026#39;, name: \u0026#34;navigation\u0026#34;, component: NavigationView, children: [ { path: \u0026#34;\u0026#34;, name: \u0026#34;controller\u0026#34;, component: () =\u0026gt; ControllerView, }, ] } 之后在NavigationView中需要嵌套的地方加上\u0026lt;RouterView\u0026gt;即可\n3.获取路由数据并操作路由 见下方代码\n1 2 3 4 import {useRoute, useRouter} from \u0026#34;vue-router\u0026#34;; const route = useRoute() const router = useRouter() ","date":"2025-01-16T00:00:00Z","permalink":"https://over04.github.io/p/%E5%A4%9A%E6%AC%A1%E5%85%A5%E5%9D%91vue3%E5%90%8E%E7%9A%84%E8%B8%A9%E5%9D%91%E6%97%A5%E5%BF%97/","title":"多次入坑Vue3后的踩坑日志"},{"content":"1.@Value包裹的变量不能为静态 由于SpringBoot整个都是注入式的，因此不能有静态的数据，设定后不会报错但是值为null\n2.通过new产生的实例，@Value值为空 SpringBoot是注入式的，因此必须要通过注入的方式来实例化\n1 2 3 4 5 6 7 8 9 @Component class Test { TokenUtil tokenUtil; @Autowired // 这里可以直接注入变量(直接装饰变量，但是不推荐，代码也会给出警告) public void setTokenUtil(TokenUtil tokenUtil) { this.tokenUtil = tokenUtil; } } ","date":"2024-01-05T00:00:00Z","permalink":"https://over04.github.io/p/%E4%BB%8Eapplication.properties%E4%B8%AD%E4%BD%BF%E7%94%A8@value%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E4%B8%BAnull/","title":"从application.properties中使用@Value读取数据为null"},{"content":"TEC-2的适配(macos) Crossover 版本25.0 (25.0.0.38553) TEC-2正常使用，监控程序有问题，终端不能自动翻页\nParallels Desktop 版本 19.3.0 (54924) 可以使用\n界面模块 微型开关1 A口地址: A口地址，相当于只读地址 B口地址: B口地址，相当于可读可写地址 SCI: 未知作用 SSH: 未知作用\n微型开关2 SST: 未知作用\nMI876: 对应I8-6 MI543: 对应I5-3 MI210: 对应I2-0\n存入手拨数据到寄存器 在B口地址设置要存入寄存器的地址 I8-6设置为010或者011，I5-3设置为000，I2-0设置为111 按下step后存入 分步介绍：\nI2-0设置的D、0传入ALU进行计算输出F 按下step后传入根据I8-6的设置，F储存到B地址 手拨数据 D15: 符号位 D14-D0: 高位到低位值\n显示选择 ALU模式 不需要按下step直接输出ALU计算结果F\nSZVC模式 需要按下step后才能显示结果\nS: 符号位 V: 溢出标志 Z: 零标志 C: 进位标志 ","date":"0001-01-01T00:00:00Z","permalink":"https://over04.github.io/p/tec-2%E5%AE%9E%E9%AA%8C%E7%B3%BB%E7%BB%9F%E6%A8%A1%E6%8B%9F%E6%9C%BA%E4%BD%BF%E7%94%A8/","title":"TEC-2实验系统模拟机使用"}]